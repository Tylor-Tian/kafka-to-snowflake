-- =========================================
-- 030_mon_schema_tasks.sql
-- 监控/告警（MART_MON）：阈值、告警日志、告警任务 + 常用查询
-- =========================================
ALTER SESSION SET TIMEZONE='UTC';

-- 参数
SET DB_NAME   = 'DEMO_DW';
SET MART_SCHEMA = 'MART';
SET MON_SCHEMA  = 'MART_MON';
SET WH_NAME   = 'WH_TINY';

USE ROLE MART_ROLE;
USE WAREHOUSE IDENTIFIER($WH_NAME);
USE DATABASE IDENTIFIER($DB_NAME);
USE SCHEMA   IDENTIFIER($MON_SCHEMA);

-- 阈值（通用配置：可调窗口与阈值）
CREATE OR REPLACE TABLE ALERT_THRESHOLD (
  METRIC      STRING,    -- raw_lag / mart_lag / no_data
  WINDOW_MIN  NUMBER,    -- 窗口大小（分钟）
  THRESHOLD_S NUMBER     -- 阈值（秒）
);

INSERT OVERWRITE INTO ALERT_THRESHOLD (METRIC, WINDOW_MIN, THRESHOLD_S) VALUES
  ('raw_lag',  5, 120),
  ('mart_lag', 5, 180),
  ('no_data',  3,   0);

-- 告警日志
CREATE OR REPLACE TABLE ALERT_LOG (
  ALERT_TIME TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
  METRIC     STRING,
  VALUE      NUMBER,
  THRESHOLD  NUMBER,
  DETAIL     VARIANT,
  STATUS     STRING DEFAULT 'OPEN'
);

-- 近窗延迟（RAW 摄取）
CREATE OR REPLACE VIEW V_INGEST_LAG_5M AS
WITH T AS (
  SELECT
    COUNT(*) AS rows_5m,
    AVG(DATEDIFF('second',
        TO_TIMESTAMP_NTZ(r.RECORD_METADATA:"CreateTime"::NUMBER/1000),
        CURRENT_TIMESTAMP())) AS avg_s,
    MAX(DATEDIFF('second',
        TO_TIMESTAMP_NTZ(r.RECORD_METADATA:"CreateTime"::NUMBER/1000),
        CURRENT_TIMESTAMP())) AS max_s
  FROM IDENTIFIER($DB_NAME)||'.RAW.EVENTS_RAW_B' r
  WHERE TO_TIMESTAMP_NTZ(r.RECORD_METADATA:"CreateTime"::NUMBER/1000) >= DATEADD('minute', -5, CURRENT_TIMESTAMP())
)
SELECT rows_5m, avg_s, max_s FROM T;

-- 近窗延迟（MART 刷新）
CREATE OR REPLACE VIEW V_MART_LAG_5M AS
WITH T AS (
  SELECT
    COUNT(*) AS rows_5m,
    AVG(DATEDIFF('second', EVENT_TIME, CURRENT_TIMESTAMP())) AS avg_s,
    MAX(DATEDIFF('second', EVENT_TIME, CURRENT_TIMESTAMP())) AS max_s
  FROM IDENTIFIER($DB_NAME)||'.'||IDENTIFIER($MART_SCHEMA)||'.F_EVENTS_PARSED'
  WHERE EVENT_TIME >= DATEADD('minute', -5, CURRENT_TIMESTAMP())
)
SELECT rows_5m, avg_s, max_s FROM T;

-- 告警任务：每 5 分钟
CREATE OR REPLACE TASK TASK_ALERT_CHECK
  WAREHOUSE = IDENTIFIER($WH_NAME)
  SCHEDULE  = '5 MINUTE'
AS
BEGIN
  -- RAW 延迟
  INSERT INTO ALERT_LOG (METRIC, VALUE, THRESHOLD, DETAIL)
  SELECT 'raw_lag', v.avg_s, t.THRESHOLD_S,
         OBJECT_CONSTRUCT('rows_5m', v.rows_5m, 'max_s', v.max_s)
  FROM V_INGEST_LAG_5M v
  JOIN ALERT_THRESHOLD t ON t.METRIC='raw_lag'
  WHERE v.rows_5m > 0 AND v.avg_s > t.THRESHOLD_S;

  -- MART 延迟
  INSERT INTO ALERT_LOG (METRIC, VALUE, THRESHOLD, DETAIL)
  SELECT 'mart_lag', v.avg_s, t.THRESHOLD_S,
         OBJECT_CONSTRUCT('rows_5m', v.rows_5m, 'max_s', v.max_s)
  FROM V_MART_LAG_5M v
  JOIN ALERT_THRESHOLD t ON t.METRIC='mart_lag'
  WHERE v.rows_5m > 0 AND v.avg_s > t.THRESHOLD_S;

  -- 近窗无数据
  INSERT INTO ALERT_LOG (METRIC, VALUE, THRESHOLD, DETAIL)
  SELECT 'no_data', 0, t.THRESHOLD_S,
         OBJECT_CONSTRUCT('window_min', t.WINDOW_MIN)
  FROM ALERT_THRESHOLD t
  WHERE t.METRIC='no_data'
    AND 0 = (
      SELECT COUNT(*) FROM IDENTIFIER($DB_NAME)||'.'||IDENTIFIER($MART_SCHEMA)||'.F_EVENTS_PARSED'
      WHERE EVENT_TIME >= DATEADD('minute', -t.WINDOW_MIN, CURRENT_TIMESTAMP())
    );
END;

ALTER TASK TASK_ALERT_CHECK RESUME;

-- 常用查询
-- 1) 近 10 条告警
SELECT * FROM ALERT_LOG ORDER BY ALERT_TIME DESC LIMIT 10;

-- 2) 关闭 1 小时前的 OPEN 告警（可选）
-- UPDATE ALERT_LOG SET STATUS='CLOSED'
-- WHERE STATUS='OPEN' AND ALERT_TIME < DATEADD('hour', -1, CURRENT_TIMESTAMP());

-- 3) 手动执行一次任务
-- EXECUTE TASK TASK_ALERT_CHECK;

-- 4) 任务历史
-- SELECT STATE, SCHEDULED_TIME, COMPLETED_TIME, ERROR_MESSAGE
-- FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME=>'TASK_ALERT_CHECK', RESULT_LIMIT=>10))
-- ORDER BY SCHEDULED_TIME DESC;
